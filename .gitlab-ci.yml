# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# N'oublier pas de creer un gitlab runner
#
#    Project > General > Visibility/project-features/permissions
#                 Pipelines    > [activate]
#
#
#    Project > Settings > Members
#                 Invit Group  > [ "Integration"   with role  "maintainer" ]
#                 Invit User   > [ "Ansible Tower" with role  "guest"      ]
#
#
# Download artifacts via le token de l utilisateur 'artifacts-downloader' :
#      $ curl -o /tmp/artifacts.zip -H "PRIVATE-TOKEN: ********" "https://sources.dauphine.psl.eu/api/v4/projects/PROJECT_ID/jobs/JOB_ID/artifacts"    
#
#
# Ansible Tower avec 2 Job-Template
#
#    Job-Template 41 => deploiement BACKOFFICE   => name="JOBTPL_scolarite/candidatures_backoffice"
#    Job-Template 42 => deploiement FRONTOFFICE  => name="JOBTPL_scolarite/candidatures_frontoffice"
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

default:
  image: "dockerhub.dauphine.fr/gitlabci/el7"


variables:
  GIT_SUBMODULE_STRATEGY: recursive
  #
  # == PROPRIETES DE L'APPLICATION ==========
  APP_NAME: ${CI_PROJECT_NAME}
  APP_RELEASE: ${CI_PIPELINE_IID}
  PROJECT_CACHE_DIR: "${CI_PROJECT_DIR}/cache/${CI_PIPELINE_ID}"
  # =========================================
  #
  # == PROPRIETES RPM-REPO ==================
  RPM_REPOSITORY: "http://repository.dsi.dauphine.fr"
  CJOB_RPM_REPOSITORY: "http://ru-rpmrepo-as1.cric.dauphine.fr"
  BIN_REPOSITORY: "http://archiva.dsi.dauphine.fr"
  # =========================================
  #
  # == PROPRIETES ANSIBLE-TOWER =============
  TOWERCI_HOST:    "webservices.dsi.dauphine.fr"
  TOWERCI_BASEURL: "https://${TOWERCI_HOST}"
  CI_INVENTORY:    "INVENTORY_TF"
  # =========================================


cache: &global_cache
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    # build-cache     (for build only)
    - cache/
  policy: pull-push


before_script:
  # << VERSION DE L APPLICATION >>
  - APP_VERSION="0.0.0"
  - '[[ $(echo "${CI_BUILD_REF_NAME}" | grep -cE "^[0-9]+(\.[0-9]+)*$") -eq 1 ]] && APP_VERSION="${CI_BUILD_REF_NAME}"'
  - export APP_VERSION=${APP_VERSION}
  

stages:
  - ci_debug
  - ci_appbuild
  - ci_rpmbuild
  - ci_artifact
  - ci_publish
  - ci_deploy
  - ci_result


# ==============================================
# visualisation des variables
# ==============================================
env_debug:
  stage: ci_debug
  cache: {}
  script:
    # projet properties
    - echo "PROJECT properties >> name='${APP_NAME}' + version='${APP_VERSION}' + release='${APP_RELEASE}'  (jobID=${CI_JOB_ID})"
    - echo ""
    - echo "~~~ variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    - echo "JOB>> WHOAMI = $(whoami) + PWD = $(pwd)"
    - env | grep "^CI_"   | sort
    - env | grep "^CJOB_" | sort
    - env | grep "^GIT_" | sort
    - echo ""
    - echo "~~~ project-tree ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    - 'echo "Project dir : ${CI_PROJECT_DIR}/"'
    - 'tree -a -L 2 -I ".git" ${CI_PROJECT_DIR}/'
    - echo ""
    - echo "~~~ artifact-url ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    - 'echo "CURL > header[PRIVATE-TOKEN] on https://sources.dauphine.psl.eu/api/v4/projects/PROJECT_ID/jobs/JOB_ID/artifacts"'
    - echo ""
  tags: ["Docker"]


# ==============================================
# generation des binaires de l'application
#    - documentation avec PANDOC
#    - RPM pour RHEL7
#    - RPM pour RHEL8
# FINAL>> make artifact
# ==============================================
docbuild:
  stage: ci_appbuild
  cache:
    # inherit all global cache settings
    <<: *global_cache
  script:
    # projet properties
    - echo "PROJECT properties >> name='${APP_NAME}' + version='${APP_VERSION}' + release='${APP_RELEASE}'  (jobID=${CI_JOB_ID})"
    - echo ""
    # build documentation
    ###- yum install -y texlive-ulem
    - pandoc --variable urlcolor=blue -s -o ${CI_PROJECT_DIR}/${APP_VERSION}-README.pdf ${CI_PROJECT_DIR}/README.md
    # envoi en cache
    - echo "CACHE copy ..."
    - mkdir -p ${PROJECT_CACHE_DIR}
    - find ${CI_PROJECT_DIR} -mindepth 1 -maxdepth 1 -name "${APP_NAME}-*.pdf" | while read file ; do echo "PDF >> ${file}" ; cp ${file} ${PROJECT_CACHE_DIR}/ ; done
  tags: ["Docker"]
  image: "dv-dockerhub-al1.cric.dauphine.fr:5000/gitlabci/el7"


appbuild:
  stage: ci_appbuild
  cache:
    # inherit all global cache settings
    <<: *global_cache
  script:
    # projet properties
    - echo "PROJECT properties >> name='${APP_NAME}' + version='${APP_VERSION}' + release='${APP_RELEASE}'   (jobID=${CI_JOB_ID})"
    - echo ""
    # pre-requis
    - yum install -y gcc-c++ make
    #   >> install nodejs v14
    - yum remove -y nodejs
    - 'curl -sL https://rpm.nodesource.com/setup_14.x | bash -'
    - ls /etc/yum.repos.d/
    - cat /etc/yum.repos.d/nodesource-el7.repo
    - yum clean all
    - yum makecache fast
    - yum install -y nodejs
    #   >> install yarn (derniere version)
    - yum remove -y yarn
    - 'curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo'
    - yum install -y yarn
    # Installation de env-cmd pour la gestion des envs
    - npm install -g env-cmd
    # build npm (UGGLY METHOD, rm -f package-lock.json)
    - echo "NPM 'react script' build ..."
    - echo "-- versions ------------------"
    - echo "NodeJS > $(node --version)"
    - echo "Yarn   > $(yarn -version )"
    - echo "------------------------------"
    # pre-requis java-11
    #    >> install openjdk-11 et definir par defaut
    - yum install -y java-11-openjdk java-11-openjdk-devel
    - alternatives --set javac java-11-openjdk.x86_64
    - alternatives --set java java-11-openjdk.x86_64
    # pre-requis maven > 3.1.0
    #    >> install maven
    - 'curl -O http://mirrors.ibiblio.org/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz'
    - tar xzf apache-maven-3.6.3-bin.tar.gz -C /usr/local
    - ln -s /usr/local/apache-maven-3.6.3/bin/mvn /usr/local/bin/mvn
    # build npm
    - echo "MAVEN build ..."
    - mvn --version
    # TESTS UNITAIRES uniquement sur le profil "dev"
    ##- ( cd ${CI_PROJECT_DIR} ; mvn -Pdev clean package )
    # PACKAGING RPM sans test-unitaire
    - ( cd ${CI_PROJECT_DIR} ; mvn clean package -Dmaven.test.skip=true)
    # envoi en cache
    - echo "CACHE copy ..."
    - mkdir -p ${PROJECT_CACHE_DIR}
    - find ${CI_PROJECT_DIR}/target/ -mindepth 1 -maxdepth 1 -name "*.war" | while read file ; do echo "NPM ARCHIVE >> ${file}"; cp ${file} ${PROJECT_CACHE_DIR}/ ; done
  tags: ["Docker"]


rpmbuild_el7:
  stage: ci_rpmbuild
  cache:
    # inherit all global cache settings
    <<: *global_cache
  script:
    # projet properties
    - echo "PROJECT properties >> name='${APP_NAME}' + version='${APP_VERSION}' + release='${APP_RELEASE}'  (jobID=${CI_JOB_ID})"
    - echo ""
    # build rpm
    - rpmdev-setuptree
    - mkdir -p ${HOME}/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
    # fichier spec
    - cp ${CI_PROJECT_DIR}/rpmbuild-ci.spec                    ${HOME}/rpmbuild/SPECS/rpmbuild.spec
    # fichier(s) resource(s)
    - cp -r ${CI_PROJECT_DIR}/etc                              ${HOME}/rpmbuild/BUILD/etc
    ##- cp -r ${CI_PROJECT_DIR}/scripts                          ${HOME}/rpmbuild/BUILD/scripts
    # fichier(s) binaire(s)
    - cp -r ${PROJECT_CACHE_DIR}/*.war                         ${HOME}/rpmbuild/BUILD/
    - rpmbuild -bb --define "_topdir ${HOME}/rpmbuild" --define "rpm_name ${APP_NAME}" --define "rpm_version ${APP_VERSION}" --define "rpm_release ${APP_RELEASE}" ${HOME}/rpmbuild/SPECS/rpmbuild.spec
    # envoi en cache
    - mkdir -p ${PROJECT_CACHE_DIR}
    - find ${HOME}/rpmbuild/RPMS -mindepth 1 -maxdepth 3 -name "${APP_NAME}-*.rpm"
    - find ${HOME}/rpmbuild/RPMS -mindepth 1 -maxdepth 3 -name "${APP_NAME}-${APP_VERSION}-${APP_RELEASE}.*.rpm"
    - find ${HOME}/rpmbuild/RPMS -mindepth 1 -maxdepth 3 -name "${APP_NAME}-${APP_VERSION}-${APP_RELEASE}.*.rpm" | while read file ; do echo "RPM >> ${file}" ; cp ${file} ${PROJECT_CACHE_DIR}/ ; done
  dependencies: []
  tags: ["Docker"]
  image: "dockerhub.dauphine.fr/gitlabci/el7"


# ==============================================
# generation de l'artifact
#    >> ensemble des binaires
# ==============================================
make_artifact:
  stage: ci_artifact
  cache:
    # inherit all global cache settings
    <<: *global_cache
  script:
    # projet properties
    - echo "PROJECT properties >> name='${APP_NAME}' + version='${APP_VERSION}' + release='${APP_RELEASE}'  (jobID=${CI_JOB_ID})"
    - echo ""
    # cache sur le jobID
    - mkdir -p ${PROJECT_CACHE_DIR}
    - echo "${CI_JOB_ID}" > ${PROJECT_CACHE_DIR}/artifact-jobid.txt
    - tree ${PROJECT_CACHE_DIR}
    # publication in artifact
    - mkdir -p ${CI_PROJECT_DIR}/public
    - 'find ${PROJECT_CACHE_DIR} -mindepth 1 -maxdepth 1 -name "${APP_VERSION}-*.pdf"                             | while read file ; do echo "PDF >> ${file}" ; cp ${file} ${CI_PROJECT_DIR}/public/ ; done'
    - 'find ${PROJECT_CACHE_DIR} -mindepth 1 -maxdepth 1 -name "*.war"                                            | while read file ; do echo "PDF >> ${file}" ; cp ${file} ${CI_PROJECT_DIR}/public/ ; done'
    - 'find ${PROJECT_CACHE_DIR} -mindepth 1 -maxdepth 1 -name "${APP_NAME}-${APP_VERSION}-${APP_RELEASE}.*.rpm"  | while read file ; do echo "RPM >> ${file}" ; cp ${file} ${CI_PROJECT_DIR}/public/ ; done'
    - 'find ${PROJECT_CACHE_DIR} -mindepth 1 -maxdepth 1 -name "artifact-jobid.txt"                               | while read file ; do echo "RPM >> ${file}" ; cp ${file} ${CI_PROJECT_DIR}/public/ ; done'
    # log pour la publication manuelle
    - echo ""
    - echo "# === Manual RPM-PUSH ==="
    - 'echo "CMD>> curl -s -i -X GET \"${CJOB_RPM_REPOSITORY}/api/deploy?from=sources.dauphine.psl.eu&projectname=${CI_PROJECT_NAMESPACE}.${APP_NAME}&projectid=${CI_PROJECT_ID}&jobid=${CI_JOB_ID}&stages=unstable,testing,stable\"; echo"'
    - echo ""
    - echo "# === Manual Ansible ==="
    - echo "CMD>> ./ansible-exec-v4.sh --git-url 'git@sources.dauphine.psl.eu:${CI_PROJECT_NAMESPACE}/${APP_NAME}.git' --git-branch '${APP_VERSION}' --playbook-file 'ansible/playbook.yml'"
    - echo ""
  dependencies: ["docbuild","rpmbuild_el7"]
  artifacts:
    paths:
      - public/*
    expire_in: 2 hrs
  tags: ["Docker"]


# ==============================================
# publication des binaires
#    - RPM publié via artifact (cf projet 'integration/rpm-repository')
#    - et autres binaires (jar,war,etc...)
# ==============================================
app_publish:
  stage: ci_publish
  cache:
    # inherit all global cache settings (lecture seule)
    <<: *global_cache
    policy: pull
  script:
    # projet properties
    - echo "PROJECT properties >> name='${APP_NAME}' + version='${APP_VERSION}' + release='${APP_RELEASE}'  (jobID=${CI_JOB_ID})"
    - echo ""
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # artifact
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    - mkdir -p ${PROJECT_CACHE_DIR}
    - ARTIFACT_JOB_ID=$(cat ${PROJECT_CACHE_DIR}/artifact-jobid.txt | grep -E "^[0-9]+$")
    #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # DEPLOY-RPM
    #    lancement des pseudo-webhook URL
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    - echo "RPM-PUSH with [[ from=sources.dauphine.psl.eu /  projectname=${CI_PROJECT_NAMESPACE}.${APP_NAME} / projectid=${CI_PROJECT_ID} / jobid=${ARTIFACT_JOB_ID} / stages=unstable,testing,stable ]] ..."
    # SWITCH release/or-not
    - '[[ $(echo "${APP_VERSION}" | grep -v "0\.0\.0" | grep -cE "^[0-9]+(\.[0-9]+)*$") -eq 1 ]] && ( echo "curl -s -X GET \"${CJOB_RPM_REPOSITORY}/api/deploy?from=sources.dauphine.psl.eu&projectname=${CI_PROJECT_NAMESPACE}.${APP_NAME}&projectid=${CI_PROJECT_ID}&jobid=${ARTIFACT_JOB_ID}&stages=unstable,testing,stable\"" )'
    - '[[ $(echo "${APP_VERSION}" | grep -v "0\.0\.0" | grep -cE "^[0-9]+(\.[0-9]+)*$") -eq 1 ]] && ( curl -s -X GET "${CJOB_RPM_REPOSITORY}/api/deploy?from=sources.dauphine.psl.eu&projectname=${CI_PROJECT_NAMESPACE}.${APP_NAME}&projectid=${CI_PROJECT_ID}&jobid=${ARTIFACT_JOB_ID}&stages=unstable,testing,stable" ; echo )'
    - '[[ $(echo "${APP_VERSION}" | grep -c "0\.0\.0") -eq 1 ]] && echo "RPM > no export (version not define)" || echo "continue"'
    #
    # DEPRECATED METHOD
    #- '[[ $(echo "${APP_VERSION}" | grep -v "0\.0\.0" | grep -cE "^[0-9]+(\.[0-9]+)*$") -eq 1 ]] && curl -s -w "HTTP_CODE > %{http_code}" -X GET "http://repository.dsi.dauphine.fr/gitlabci/?name=${CI_PROJECT_NAMESPACE}.${APP_NAME}&from=sources.dauphine.psl.eu&project_id=${CI_PROJECT_ID}&job_id=${ARTIFACT_JOB_ID}&stages=unstable,testing,stable" 1>/dev/null'
    - echo ""
  dependencies: ["make_artifact"]
  except: ["main"]
  tags: ["Docker"]


# ==============================================
# deploy instructions
#    - instructions de déploiement
#    via @qualite ou @tower
# ==============================================
deploy_instructions:
  stage: ci_deploy
  cache:
    # inherit all global cache settings (lecture seule)
    <<: *global_cache
    policy: pull
  script:
    # projet properties
    - echo "PROJECT properties >> name='${APP_NAME}' + version='${APP_VERSION}' + release='${APP_RELEASE}'  (jobID=${CI_JOB_ID})"
    - echo ""
    #
    # RECUP branch
    - SCM_BRANCH="x.y.z"
    - '[ "${APP_VERSION}" != "0.0.0" ] && SCM_BRANCH="${APP_VERSION}"'
    #
    # PRODUCTION INSTRUCTIONS
    #
    - '[ -f /tmp/prod-instructions.txt ] && rm -f /tmp/prod-instructions.txt'
    - echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"  >> /tmp/prod-instructions.txt
    - echo "DEMANDE DE DEPLOIEMENT"                                                    >> /tmp/prod-instructions.txt
    - echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"  >> /tmp/prod-instructions.txt
    - echo " "                                                                         >> /tmp/prod-instructions.txt
    - echo "========================"                                                  >> /tmp/prod-instructions.txt
    - echo "Pré-requis"                                                                >> /tmp/prod-instructions.txt
    - echo "========================"                                                  >> /tmp/prod-instructions.txt
    - echo " "                                                                         >> /tmp/prod-instructions.txt
    - echo "    DEX et VMs (préalablement démandés)"                                   >> /tmp/prod-instructions.txt
    - echo " "                                                                         >> /tmp/prod-instructions.txt
    - echo "========================"                                                  >> /tmp/prod-instructions.txt
    - echo "Information à fournir"                                                     >> /tmp/prod-instructions.txt
    - echo "========================"                                                  >> /tmp/prod-instructions.txt
    - echo " "                                                                         >> /tmp/prod-instructions.txt
    - echo "    JOB_TEMPLATE   = \"JOBTPL_${CI_PROJECT_PATH}\""                        >> /tmp/prod-instructions.txt
    - echo " "                                                                         >> /tmp/prod-instructions.txt
    - echo "    ENVIRONNEMENT  = << \"PROD\", \"PREPROD\", \"TEST_FONCTIONNEL\" >>"    >> /tmp/prod-instructions.txt
    - echo "    VMs FQDN       = << a donner la 1ere fois >>"                          >> /tmp/prod-instructions.txt
    - echo "    VERSION/BRANCH = << \"x.y.z\" >>"                                      >> /tmp/prod-instructions.txt
    - echo " "                                                                         >> /tmp/prod-instructions.txt
    - echo "========================"                                                  >> /tmp/prod-instructions.txt
    - echo "Vérifier ces variables (extrait extra-vars.yml)"                           >> /tmp/prod-instructions.txt
    - echo "========================"                                                  >> /tmp/prod-instructions.txt
    - echo " "                                                                         >> /tmp/prod-instructions.txt
    - echo " "                                                                         >> /tmp/prod-instructions.txt
    - '[ -f ${CI_PROJECT_DIR}/ansible/extra-vars.yml ]   && cat ${CI_PROJECT_DIR}/ansible/extra-vars.yml  >> /tmp/prod-instructions.txt'
    - '[ ! -f ${CI_PROJECT_DIR}/ansible/extra-vars.yml ] && echo "N/A"                                    >> /tmp/prod-instructions.txt'
    - echo " "                                                                         >> /tmp/prod-instructions.txt
    - echo " "                                                                         >> /tmp/prod-instructions.txt
    - echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"  >> /tmp/prod-instructions.txt
    - cat /tmp/prod-instructions.txt
  dependencies: ["app_publish"]
  tags: ["Docker"]


# ==============================================
# deploy tower
#   via API-REST
#   SI commit-message contient '@schedule.PP' ou 'schedule.RU'
# ==============================================
deploy_auto_tower_backoffice:
  stage: ci_deploy
  cache:
    # inherit all global cache settings (lecture seule)
    <<: *global_cache
    policy: pull
  script:
    # projet properties
    - echo "PROJECT properties >> name='${APP_NAME}' + version='${APP_VERSION}' + release='${APP_RELEASE}'  (jobID=${CI_JOB_ID})"
    - echo ""
    #
    #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # JOB_TEMPLATE pilote pour le PROJET
    #    version (branche)  +  extra_vars (variables de project)
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # version
    - '[ "${APP_VERSION}" = "0.0.0" ] && (echo "GIT branch >> invalid"; false)'
    - SCM_BRANCH="x.y.z"
    - '[ "${APP_VERSION}" != "0.0.0" ] && SCM_BRANCH="${APP_VERSION}"'
    # extra-vars au format base64
    - EXTRA_VARS="{}"
    - '[ -f ${CI_PROJECT_DIR}/ansible/extra-vars.yml ] && EXTRA_VARS="$(cat ${CI_PROJECT_DIR}/ansible/extra-vars.yml)"'
    - EXTRA_VARS_BASE64="$(echo -n "${EXTRA_VARS}" | base64 2>/dev/null | tr -d '\n')"
    # tower => jobtemplate
    - TOWER_JOBNAME="JOBTPL_${CI_PROJECT_PATH}"
    #
    #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Modify JOB_TEMPLATE du PROJET
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    - 'HEADER_JSON="Content-Type: application/json"'
    - 'HEADER_SNI="HOST: ${TOWERCI_HOST}"'
    - 'API_DATA="{\"jobtemplate\": \"${TOWER_JOBNAME}\", \"branch\": \"${SCM_BRANCH}\", \"extra_vars_base64\": \"${EXTRA_VARS_BASE64}\"}"'
    - 'echo "{\"jobtemplate\": \"${TOWER_JOBNAME}\", \"branch\": \"${SCM_BRANCH}\", \"extra_vars_base64\": \"${EXTRA_VARS_BASE64}\"}" > /tmp/api_modify.json'
    # appel
    - echo "CMD> curl -s -o /tmp/jobtpl-modify.json -H '${HEADER_SNI}' -H '${HEADER_JSON}' -X PATCH --data '${API_DATA}'   ${TOWERCI_BASEURL}/apitowerci/job_template"
    - curl -s -o /tmp/jobtpl-modify.json -H "${HEADER_SNI}" -H "${HEADER_JSON}" -X PATCH --data @/tmp/api_modify.json      ${TOWERCI_BASEURL}/apitowerci/job_template
    #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Executer le JOB_TEMPLATE sur l'environnement par défault
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    - 'API_LAUNCH="{\"jobtemplate\": \"${TOWER_JOBNAME}\", \"inventory\": \"${CI_INVENTORY}\"}"'
    - 'echo "{\"jobtemplate\": \"${TOWER_JOBNAME}\", \"inventory\": \"${CI_INVENTORY}\"}" > /tmp/api_launch.json'
    # appel
    - echo "CMD> curl -s -o /tmp/jobtpl-launch.json -H '${HEADER_SNI}' -H '${HEADER_JSON}' -X POST --data '${API_LAUNCH}'  ${TOWERCI_BASEURL}/apitowerci/launch"
    - curl -s -o /tmp/jobtpl-launch.json -H "${HEADER_SNI}" -H "${HEADER_JSON}" -X POST --data @/tmp/api_launch.json       ${TOWERCI_BASEURL}/apitowerci/launch
    #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Recuperation des infos de API
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    - JOB_ID=$(    jq -r '.job'     /tmp/jobtpl-launch.json)
    - JOB_STATUS=$(jq -r '.status'  /tmp/jobtpl-launch.json)
    - JOB_FAILED=$(jq -r '.failed'  /tmp/jobtpl-launch.json)
    - echo "JOB-API > ID=${JOB_ID} + STATUS=${JOB_STATUS} + FAILED=${JOB_FAILED}   for job='${TOWER_JOBNAME}' in TOWER"
    - echo "waiting job execution ..."
    #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # ATTENDRE LA FIN DU JOB
    #    API /apitowerci/job_status/${JOB_ID}
    #    avec ".status" => ["pending","waiting","running","successful"]
    #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #    UGLY LINE (mais impossible de faire mieux)
    - for ind in $(seq 0 15 500);do curl -s -o /tmp/job_${JOB_ID}.json -H "${HEADER_SNI}" ${TOWERCI_BASEURL}/apitowerci/job_status/${JOB_ID}; STATUS=$(jq -r '.status' /tmp/job_${JOB_ID}.json); echo "~~ ${ind}s > ${STATUS}"; [[ "$STATUS" =~ ^(pending|waiting|running)$ ]] && (sleep 15; continue) || break; done
    - JOB_LAUNCH_STATUS=$(jq -r '.status' /tmp/job_${JOB_ID}.json)
    - echo "JOB-RUN > ID=${JOB_ID} + STATUS=${JOB_LAUNCH_STATUS}"
    - echo -e "\n\n\n"
    #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Affichage resultat final
    #    extract ansible-log with '.job_event.results | sort_by(.id) | .[].stdout'
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    - echo -e "\n\n<< PLUS DE LOG Ansible-Tower sur l'interface WEB >>\n\n"
    - '[ -f /tmp/job_${JOB_ID}.json ] && jq -r ".job_event.results | sort_by(.id) | .[].stdout" /tmp/job_${JOB_ID}.json'
    - echo -e "\n\n\n"
    - '[ "${JOB_LAUNCH_STATUS}" != "successful" ] && (echo "TOWER >> echec"; false)'
    - echo ""
  dependencies: ["app_publish"]
  except: ["main"]
  tags: ["Docker"]


# ==============================================
# resultat
# ==============================================
app_result:
  stage: ci_result
  cache:
    # inherit all global cache settings
    <<: *global_cache
  script:
    # projet properties
    - echo "PROJECT properties >> name='${APP_NAME}' + version='${APP_VERSION}' + release='${APP_RELEASE}'  (jobID=${CI_JOB_ID})"
    - echo ""
    - echo "~~~ nettoyage   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    - echo "purge cache (pipeline> ${CI_PIPELINE_ID})"
    - '[[ -d ${CI_PROJECT_DIR}/cache ]] && ( find ${CI_PROJECT_DIR}/cache -mindepth 1 -maxdepth 1 | while read child; do echo "DEL >> ${child}" ; rm -rf ${child}; done )'
    - echo ""
  #dependencies: ["app_deploy"]
  tags: ["Docker"]

